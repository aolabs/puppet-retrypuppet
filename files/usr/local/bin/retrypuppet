#!/usr/bin/env python

from __future__ import print_function
from time import sleep
from subprocess import Popen, PIPE, STDOUT
import sys

# Any arguments are passed directly to puppet.
args = sys.argv
args.pop(0)



# Function to run puppet, will return False if puppet was locked (already
# running).  Stdout and stderr are passed through to the console.
def run():

  try:
    # Run puppet inside stdbuf to attempt to eliminate any buffering.
    p = Popen( [ 'stdbuf', '-oL', '-eL', 'puppet' ] + sys.argv, stdout=PIPE, stderr=STDOUT )

    locked=False

    # Loop through the lines of input until puppet exits.
    for line_num, line in enumerate( p.stdout ):

      # Check if the first line of output indicates puppet already running (the in progress message appears to
      # always be on the first line, so we don't waste time checking every line of the run - short-circuit logic).
      if not line_num and ( 'run of puppet configuration client already in progress' in line.lower().decode() ):
        locked = True

      # Pass the output of puppet through to the console if the run was not locked.  If locked, we still loop to drain
      # the input buffer and avoid any orphan child processes - the necessity of this is unclear it's possible we could
      # just return False, but there is no harm in continuing to loop.
      if not locked:
        sys.stdout.write( line.decode() )
        sys.stdout.flush()

  except:
      print( 'An unrecoverable error occured while trying to execute puppet.' )
      sys.exit( 127 )
  finally:
    p.wait()

  # If puppet output indicated that a run was already in progress, then return False.
  if locked:
    return { 'locked': True, 'rc': 11 }   # EWOULDBLOCK / EAGAIN
  else:
    return { 'locked': False, 'rc': p.returncode }



# How many attemps should be made, how long should we wait in seconds.
retries=10
delay=30

# Retry until run returns true or we run out of retries.
while retries:
  ret = run()

  if ret['locked']:
    print( 'Run already in progress, will retry in {} seconds, {} attempts remain...'.format( delay, retries ) )
    retries -= 1
    sleep( delay )
  else:
    break

# Print an error message before we exit if we ran out of retries.
if not retries:
  print( 'No attempts remain...will exit.')

# Exit with the return code of puppet (or 11 if we timed out).
sys.exit( ret['rc'] )
